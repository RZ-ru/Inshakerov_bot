package bot

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/RZ-ru/Inshakerov_bot/internal/db"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func HandleStart(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–æ–∫—Ç–µ–π–ª—å.\n\n–ù–∞–ø–∏—à–∏, –∫–∞–∫–æ–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å üçãü•É")
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	bot.Send(msg)
}

func HandleIngredientInput(bot *tgbotapi.BotAPI, update tgbotapi.Update, database *sql.DB) {
	text := strings.TrimSpace(strings.ToLower(update.Message.Text))
	userID := update.Message.From.ID

	var count int
	err := database.QueryRow(`SELECT COUNT(*) FROM goods WHERE LOWER(name) = $1`, text).Scan(&count)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:", err)
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."))
		return
	}

	if count == 0 {
		rows, err := database.Query(`
	SELECT name FROM goods 
	WHERE LOWER(name) % $1 OR LOWER(name) ILIKE '%' || $1 || '%' 
	LIMIT 3;
`, text)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:", err)
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤."))
			return
		}
		defer rows.Close()

		var suggestions []string
		for rows.Next() {
			var name string
			rows.Scan(&name)
			suggestions = append(suggestions, name)
		}

		if len(suggestions) > 0 {
			similar := suggestions[0]
			msg := tgbotapi.NewMessage(update.Message.Chat.ID,
				fmt.Sprintf("ü§î –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É *%s*?", similar))
			msg.ParseMode = "Markdown"
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–î–∞", "confirm_"+similar),
					tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç", "reject"),
				),
			)
			bot.Send(msg)
			return
		}

		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "ü•≤ –¢–∞–∫–æ–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π."))
		return
	}

	ShowCocktailsForIngredient(bot, update.Message.Chat.ID, database, text, userID)
}

func HandleIngredientConfirm(bot *tgbotapi.BotAPI, update tgbotapi.Update, database *sql.DB) {
	data := update.CallbackQuery.Data
	userID := update.CallbackQuery.From.ID
	chatID := update.CallbackQuery.Message.Chat.ID

	if strings.HasPrefix(data, "confirm_") {
		ingredient := strings.TrimPrefix(data, "confirm_")
		bot.Request(tgbotapi.NewCallback(update.CallbackQuery.ID, ""))
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("üîç –ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º: %s...", ingredient)))
		ShowCocktailsForIngredient(bot, chatID, database, ingredient, userID)
	} else if data == "reject" {
		msg := tgbotapi.NewMessage(chatID, "–û–∫–µ–π üôÇ –Ω–∞–ø–∏—à–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –µ—â—ë —Ä–∞–∑:")
		bot.Send(msg)
	}
}

func ShowCocktailsForIngredient(bot *tgbotapi.BotAPI, chatID int64, database *sql.DB, ingredient string, userID int64) {
	cocktails, err := db.GetCocktailsBySimilarIngredients(database, ingredient)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤."))
		return
	}

	if len(cocktails) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "ü•≤ –ö–æ–∫—Ç–µ–π–ª–µ–π —Å —Ç–∞–∫–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."))
		return
	}

	msg := tgbotapi.NewMessage(chatID,
		fmt.Sprintf("üç∏ –ù–∞–π–¥–µ–Ω–æ %d —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º *%s*!", len(cocktails), ingredient))
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = IngredientMenuKeyboard()
	bot.Send(msg)
}

func HandleCallback(bot *tgbotapi.BotAPI, update tgbotapi.Update, database *sql.DB) {
	data := update.CallbackQuery.Data
	userID := update.CallbackQuery.From.ID
	chatID := update.CallbackQuery.Message.Chat.ID

	// –û—Ç–≤–µ—Ç–∏–º Telegram, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
	bot.Request(tgbotapi.NewCallback(update.CallbackQuery.ID, ""))

	// –†–∞–∑–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä fav_123
	parts := strings.Split(data, "_")
	if len(parts) < 2 {
		return
	}

	action := parts[0]
	cocktailIDStr := parts[1]
	cocktailID, err := strconv.Atoi(cocktailIDStr)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback ID:", err)
		return
	}

	switch action {
	case "fav":
		err := db.AddFavorite(database, int64(userID), cocktailID)
		if err != nil {
			send(bot, chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
			return
		}
		send(bot, chatID, "üíõ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

	case "ignore":
		err := db.AddIgnored(database, int64(userID), cocktailID)
		if err != nil {
			send(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∫–æ–∫—Ç–µ–π–ª—è.")
			return
		}
		send(bot, chatID, "üö´ –ö–æ–∫—Ç–µ–π–ª—å —Å–∫—Ä—ã—Ç.")

	case "next":
		// –ó–∞–≥–ª—É—à–∫–∞ ‚Äî –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ
		send(bot, chatID, "‚è≠ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ üôÇ")
	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: %s", data)
	}
}

func send(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	bot.Send(msg)
}

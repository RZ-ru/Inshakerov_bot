package scraper

import (
	"fmt"
	"log"
	"net/http"
	"strings"

	"github.com/PuerkitoBio/goquery"
	"github.com/RZ-ru/Inshakerov_bot/internal/db"
)

// ParseRecipes ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
func ParseRecipes(baseURL string) ([]db.Cocktail, error) {
	log.Println("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —Å–∞–π—Ç–∞:", baseURL)

	resp, err := http.Get(baseURL)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–∞–π—Ç—É: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP: %d", resp.StatusCode)
	}

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è HTML: %v", err)
	}

	var cocktails []db.Cocktail

	// –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–æ–∫—Ç–µ–π–ª–∏
	doc.Find("a.cocktail-item-preview").Each(func(i int, s *goquery.Selection) {
		if i >= 5 { // –æ–≥—Ä–∞–Ω–∏—á–∏–º—Å—è 5 –¥–ª—è —Ç–µ—Å—Ç–∞
			return
		}

		name := strings.TrimSpace(s.Find(".cocktail-item-name").Text())
		href, _ := s.Attr("href")
		img, _ := s.Find("img.cocktail-item-image").Attr("src")

		if href == "" || name == "" {
			return
		}

		cocktailURL := "https://ru.inshaker.com" + href
		imageURL := "https://ru.inshaker.com" + img

		c := db.Cocktail{
			Name:     name,
			URL:      cocktailURL,
			ImageURL: imageURL,
		}

		// –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
		fullCocktail, err := parseCocktailDetails(c)
		if err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ %s: %v", c.Name, err)
			return
		}

		cocktails = append(cocktails, fullCocktail)
	})

	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ %d —Ä–µ—Ü–µ–ø—Ç–æ–≤", len(cocktails))
	return cocktails, nil
}

// parseCocktailDetails ‚Äî –ø–∞—Ä—Å–∏—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
func parseCocktailDetails(c db.Cocktail) (db.Cocktail, error) {
	resp, err := http.Get(c.URL)
	if err != nil {
		return c, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		return c, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (%d) –¥–ª—è %s", resp.StatusCode, c.URL)
	}

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		return c, err
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
	doc.Find("dl.ingredients dd.good").Each(func(_ int, s *goquery.Selection) {
		name := strings.TrimSpace(s.Find(".common-good-info").Contents().First().Text())
		amount := strings.TrimSpace(s.Find("amount").Text())
		unit := strings.TrimSpace(s.Find("unit").Text())

		if name == "" {
			return
		}

		c.Ingredients = append(c.Ingredients, db.CocktailIngredient{
			Good: db.Good{
				Name: name,
			},
			Amount: amount,
			Unit:   unit,
		})
	})

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
	c.Instructions = strings.TrimSpace(doc.Find(".how-to-make").Text())

	return c, nil
}
